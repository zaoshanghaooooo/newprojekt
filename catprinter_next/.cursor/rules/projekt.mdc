---
description: 
globs: 
alwaysApply: true
---
项目语言]
但是使用中文和我交流
全程使用德语编写文档和代码注释，确保团队沟通和维护一致。

第一性原则
回归需求本质、抽象核心逻辑，不被现有实现束缚。

变更流程
在动手改代码前，先给出完整的“改动方案”＋“详细说明”，包括动机、影响范围和替代方案，但不需要代码。

架构与设计原则

开闭原则（OCP）：对扩展开放，对修改关闭；新需求通过新增模块或插件实现，不改已有代码。

里氏替换（LSP）：子类可拓展父类功能，但绝不能破坏父类原有行为。

依赖倒置（DIP）：高层模块和低层模块都依赖抽象接口；面向接口编程，减少耦合。

单一职责（SRP）：每个类／模块只负责一件事，改变原因单一。

接口隔离（ISP）：将大接口拆分成小接口，客户端只依赖它用得到的方法。

迪米特法则（LoD）：只与“直接朋友”通信，必要时通过中介，降低模块间耦合。

合成复用（CRP）：优先用组合／聚合复用已有功能，继承仅做最后手段，保持封装性。

后端技术栈

框架：flask

ORM：SQLAlchemy

配置：python-dotenv

数据库：PostgreSQL（生产）、SQLite（本地／测试）

前端技术栈

框架：React + React Router

语言：TypeScript

HTTP 客户端：Axios（或同类库）

核心数据库表

orders（订单） ←→ order_items（订单项）

dishes（菜品） + food_default_items（默认配置）

dumpling_items（饺子选项）

drink_items（饮料选项）

printers（打印机配置） + print_logs（打印日志）

system_settings（全局设置）

这样一来：

维持德语，保证团队一致；

基于第一性原则抽象需求；

任何改动都要先出方案再动手；

遵循SOLID、LoD、CRP，代码稳健、高可复用、低耦合；

清晰的技术栈和数据库模型，便于开发、测试和运维。